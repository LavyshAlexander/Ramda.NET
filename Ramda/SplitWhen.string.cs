// <autogenerated>
//   This file was generated by T4 code generator SplitWhen.string.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Dynamic;
using System.Collections;
using System.Threading.Tasks;
using static Ramda.NET.Currying;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Ramda.NET
{
	public static partial class R
	{	
		/// <summary>
		/// Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
		/// <para />
		/// sig: (a -> Boolean) -> [a] -> [[a], [a]]
		/// </summary>
		/// <param name="pred">The predicate that determines where the array is split.</param>
		/// <param name="list">The array to be split.</param>
		/// <returns>Array</returns>
		public static dynamic SplitWhen(Func<char, bool> pred, string list) {
			return Currying.SplitWhen(Delegate(pred), list);
		}

		/// <summary>
		/// Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
		/// <para />
		/// sig: (a -> Boolean) -> [a] -> [[a], [a]]
		/// </summary>
		/// <param name="pred">The predicate that determines where the array is split.</param>
		/// <param name="list">The array to be split.</param>
		/// <returns>Array</returns>
		public static dynamic SplitWhen(RamdaPlaceholder pred, string list) {
			return Currying.SplitWhen(pred, list);
		}

		/// <summary>
		/// Takes a list and a predicate and returns a pair of lists with the following properties: - the result of concatenating the two output lists is equivalent to the input list; - none of the elements of the first output list satisfies the predicate; and - if the second output list is non-empty, its first element satisfies the predicate.
		/// <para />
		/// sig: (a -> Boolean) -> [a] -> [[a], [a]]
		/// </summary>
		/// <param name="pred">The predicate that determines where the array is split.</param>
		/// <param name="list">The array to be split.</param>
		/// <returns>Array</returns>
		public static dynamic SplitWhen(dynamic pred, string list) {
			return Currying.SplitWhen(Delegate(pred), list);
		}
	}
}