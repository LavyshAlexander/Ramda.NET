// <autogenerated>
//   This file was generated by T4 code generator Traverse.list..tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Dynamic;
using System.Collections;
using System.Threading.Tasks;
using static Ramda.NET.Currying;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Ramda.NET
{
	public static partial class R
	{	
		/// <summary>
		/// Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
		/// <para />
		/// sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
		/// </summary>
		/// <param name="of">first</param>
		/// <param name="f">second</param>
		/// <param name="traversable">third</param>
		/// <returns>*</returns>
		/// <see cref="R.Sequence"/>
		public static dynamic Traverse<TSource>(Delegate of, Func<TSource, TSource> f, IList<TSource> traversable) {
			return Currying.Traverse(of, Delegate(f), traversable);
		}

		/// <summary>
		/// Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
		/// <para />
		/// sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
		/// </summary>
		/// <param name="of">first</param>
		/// <param name="f">second</param>
		/// <param name="traversable">third</param>
		/// <returns>*</returns>
		/// <see cref="R.Sequence"/>
		public static dynamic Traverse<TSource>(RamdaPlaceholder of, Func<TSource, TSource> f, IList<TSource> traversable) {
			return Currying.Traverse(of, Delegate(f), traversable);
		}

		/// <summary>
		/// Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
		/// <para />
		/// sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
		/// </summary>
		/// <param name="of">first</param>
		/// <param name="f">second</param>
		/// <param name="traversable">third</param>
		/// <returns>*</returns>
		/// <see cref="R.Sequence"/>
		public static dynamic Traverse<TSource>(Delegate of, RamdaPlaceholder f, IList<TSource> traversable) {
			return Currying.Traverse(of, f, traversable);
		}

		/// <summary>
		/// Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
		/// <para />
		/// sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
		/// </summary>
		/// <param name="of">first</param>
		/// <param name="f">second</param>
		/// <param name="traversable">third</param>
		/// <returns>*</returns>
		/// <see cref="R.Sequence"/>
		public static dynamic Traverse<TSource>(Delegate of, Func<TSource, TSource> f, RamdaPlaceholder traversable = null) {
			return Currying.Traverse(of, Delegate(f), traversable);
		}

		/// <summary>
		/// Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
		/// <para />
		/// sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
		/// </summary>
		/// <param name="of">first</param>
		/// <param name="f">second</param>
		/// <param name="traversable">third</param>
		/// <returns>*</returns>
		/// <see cref="R.Sequence"/>
		public static dynamic Traverse(Delegate of, RamdaPlaceholder f = null, RamdaPlaceholder traversable = null) {
			return Currying.Traverse(of, f, traversable);
		}

		/// <summary>
		/// Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
		/// <para />
		/// sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
		/// </summary>
		/// <param name="of">first</param>
		/// <param name="f">second</param>
		/// <param name="traversable">third</param>
		/// <returns>*</returns>
		/// <see cref="R.Sequence"/>
		public static dynamic Traverse<TSource>(RamdaPlaceholder of, dynamic f, IList<TSource> traversable) {
			return Currying.Traverse(of, Delegate(f), traversable);
		}

		/// <summary>
		/// Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
		/// <para />
		/// sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
		/// </summary>
		/// <param name="of">first</param>
		/// <param name="f">second</param>
		/// <param name="traversable">third</param>
		/// <returns>*</returns>
		/// <see cref="R.Sequence"/>
		public static dynamic Traverse(Delegate of, dynamic f, RamdaPlaceholder traversable = null) {
			return Currying.Traverse(of, Delegate(f), traversable);
		}

		/// <summary>
		/// Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returningfunction over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicativeinto an Applicative of Traversable.Dispatches to the `sequence` method of the third argument, if present.
		/// <para />
		/// sig: (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)
		/// </summary>
		/// <param name="of">first</param>
		/// <param name="f">second</param>
		/// <param name="traversable">third</param>
		/// <returns>*</returns>
		/// <see cref="R.Sequence"/>
		public static dynamic Traverse<TSource>(Delegate of, dynamic f, IList<TSource> traversable) {
			return Currying.Traverse(of, Delegate(f), traversable);
		}
	}
}