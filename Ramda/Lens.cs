// <autogenerated>
//   This file was generated by T4 code generator Lens.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Dynamic;
using System.Collections;
using System.Threading.Tasks;
using static Ramda.NET.Currying;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Ramda.NET
{
	public static partial class R
	{	
		/// <summary>
		/// Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
		/// <para />
		/// sig: (s -> a) -> ((a, s) -> s) -> Lens s a
		/// </summary>
		/// <param name="getter">first</param>
		/// <param name="setter">second</param>
		/// <returns>Lens</returns>
		/// <see cref="R.View"/>
		/// <see cref="R.Set"/>
		/// <see cref="R.Over"/>
		/// <see cref="R.LensIndex"/>
		/// <see cref="R.LensProp"/>
		public static dynamic Lens(Delegate getter, Delegate setter) {
			return Currying.Lens(Delegate(getter), Delegate(setter));
		}

		/// <summary>
		/// Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
		/// <para />
		/// sig: (s -> a) -> ((a, s) -> s) -> Lens s a
		/// </summary>
		/// <param name="getter">first</param>
		/// <param name="setter">second</param>
		/// <returns>Lens</returns>
		/// <see cref="R.View"/>
		/// <see cref="R.Set"/>
		/// <see cref="R.Over"/>
		/// <see cref="R.LensIndex"/>
		/// <see cref="R.LensProp"/>
		public static dynamic Lens(RamdaPlaceholder getter, Delegate setter) {
			return Currying.Lens(getter, Delegate(setter));
		}

		/// <summary>
		/// Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
		/// <para />
		/// sig: (s -> a) -> ((a, s) -> s) -> Lens s a
		/// </summary>
		/// <param name="getter">first</param>
		/// <param name="setter">second</param>
		/// <returns>Lens</returns>
		/// <see cref="R.View"/>
		/// <see cref="R.Set"/>
		/// <see cref="R.Over"/>
		/// <see cref="R.LensIndex"/>
		/// <see cref="R.LensProp"/>
		public static dynamic Lens(Delegate getter, RamdaPlaceholder setter = null) {
			return Currying.Lens(Delegate(getter), setter);
		}

		/// <summary>
		/// Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
		/// <para />
		/// sig: (s -> a) -> ((a, s) -> s) -> Lens s a
		/// </summary>
		/// <param name="getter">first</param>
		/// <param name="setter">second</param>
		/// <returns>Lens</returns>
		/// <see cref="R.View"/>
		/// <see cref="R.Set"/>
		/// <see cref="R.Over"/>
		/// <see cref="R.LensIndex"/>
		/// <see cref="R.LensProp"/>
		public static dynamic Lens(RamdaPlaceholder getter, dynamic setter) {
			return Currying.Lens(getter, Delegate(setter));
		}

		/// <summary>
		/// Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
		/// <para />
		/// sig: (s -> a) -> ((a, s) -> s) -> Lens s a
		/// </summary>
		/// <param name="getter">first</param>
		/// <param name="setter">second</param>
		/// <returns>Lens</returns>
		/// <see cref="R.View"/>
		/// <see cref="R.Set"/>
		/// <see cref="R.Over"/>
		/// <see cref="R.LensIndex"/>
		/// <see cref="R.LensProp"/>
		public static dynamic Lens(dynamic getter, RamdaPlaceholder setter = null) {
			return Currying.Lens(Delegate(getter), setter);
		}

		/// <summary>
		/// Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
		/// <para />
		/// sig: (s -> a) -> ((a, s) -> s) -> Lens s a
		/// </summary>
		/// <param name="getter">first</param>
		/// <param name="setter">second</param>
		/// <returns>Lens</returns>
		/// <see cref="R.View"/>
		/// <see cref="R.Set"/>
		/// <see cref="R.Over"/>
		/// <see cref="R.LensIndex"/>
		/// <see cref="R.LensProp"/>
		public static dynamic Lens(dynamic getter, Delegate setter) {
			return Currying.Lens(Delegate(getter), Delegate(setter));
		}

		/// <summary>
		/// Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
		/// <para />
		/// sig: (s -> a) -> ((a, s) -> s) -> Lens s a
		/// </summary>
		/// <param name="getter">first</param>
		/// <param name="setter">second</param>
		/// <returns>Lens</returns>
		/// <see cref="R.View"/>
		/// <see cref="R.Set"/>
		/// <see cref="R.Over"/>
		/// <see cref="R.LensIndex"/>
		/// <see cref="R.LensProp"/>
		public static dynamic Lens(Delegate getter, dynamic setter) {
			return Currying.Lens(Delegate(getter), Delegate(setter));
		}

		/// <summary>
		/// Returns a lens for the given getter and setter functions. The getter "gets"the value of the focus; the setter "sets" the value of the focus. The settershould not mutate the data structure.
		/// <para />
		/// sig: (s -> a) -> ((a, s) -> s) -> Lens s a
		/// </summary>
		/// <param name="getter">first</param>
		/// <param name="setter">second</param>
		/// <returns>Lens</returns>
		/// <see cref="R.View"/>
		/// <see cref="R.Set"/>
		/// <see cref="R.Over"/>
		/// <see cref="R.LensIndex"/>
		/// <see cref="R.LensProp"/>
		public static dynamic Lens(RamdaPlaceholder getter = null, RamdaPlaceholder setter = null) {
			return Currying.Lens(getter, setter);
		}
	}
}