// <autogenerated>
//   This file was generated by T4 code generator Concat.string.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Dynamic;
using System.Collections;
using System.Threading.Tasks;
using static Ramda.NET.Currying;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Ramda.NET
{
	public static partial class R
	{	
		/// <summary>
		/// Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
		/// <para />
		/// sig: [a] -> [a] -> [a]
		/// </summary>
		/// <param name="firstList">The first list</param>
		/// <param name="secondList">The second list</param>
		/// <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
		public static dynamic Concat(string a, string b) {
			return Currying.Concat(a, b);
		}

		/// <summary>
		/// Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
		/// <para />
		/// sig: [a] -> [a] -> [a]
		/// </summary>
		/// <param name="firstList">The first list</param>
		/// <param name="secondList">The second list</param>
		/// <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
		public static dynamic Concat(RamdaPlaceholder a, string b) {
			return Currying.Concat(a, b);
		}

		/// <summary>
		/// Returns the result of concatenating the given lists or strings.Note: `R.concat` expects both arguments to be of the same type,unlike the native `Array.prototype.concat` method. It will throwan error if you `concat` an Array with a non-Array value.Dispatches to the `concat` method of the first argument, if present.
		/// <para />
		/// sig: [a] -> [a] -> [a]
		/// </summary>
		/// <param name="firstList">The first list</param>
		/// <param name="secondList">The second list</param>
		/// <returns>A list consisting of the elements of `firstList` followed by the elements of`secondList`.</returns>
		public static dynamic Concat(string a, RamdaPlaceholder b = null) {
			return Currying.Concat(a, b);
		}
	}
}