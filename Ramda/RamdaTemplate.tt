<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\bin\Debug\Newtonsoft.Json.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="T4Toolbox.tt" #><#+
public class RamdaTemplate : CSharpTemplate
{		
	private readonly string name;

	private string EmitDocumentation(string path) {
        JSDoc item = null;
        Tag returnTag = null;
        var hasSeeValues = true;
        string returnValue = null;
        IDictionary<string, JSDoc> jsdocs = null;
        var comments = new StringBuilder("/// <summary>\n");
        var indexesToDescription = new Dictionary<int, string> {
            [0] = "first",
            [1] = "second",
            [2] = "third",
            [3] = "fourth",
            [4] = "fifth",
            [5] = "sixth",
            [6] = "seventh",
            [7] = "eights",
            [8] = "nines",
            [9] = "tens"
        };

        EnsureRamdaDocumentation(path);
        jsdocs = DeserializeComments(path);
        item = jsdocs[ToCamelCase(CommentName ?? name)];
		returnTag = item.Comments.ContainsKey("return") ? item.Comments["return"] : new Tag { Type = new Type { Name = "Function" } };
        comments.AppendFormat("\t\t/// {0}\n", NormalizeComment(item.LeadingComments.Description));
        comments.Append("\t\t/// <para />\n");
        comments.AppendFormat("\t\t/// sig: {0}\n", NormalizeComment(item.Comments["sig"].Description));
        comments.Append("\t\t/// </summary>\n");
        hasSeeValues = item.Comments.ContainsKey("see");

        for (int i = 0; i < item.Params.Length; i++) {
            var param = item.Params[i];
            var paramDescription = param.Description;

            if (string.IsNullOrEmpty(param.Description)) {
                paramDescription = indexesToDescription[i];
            }

            comments.AppendFormat("\t\t/// <param name=\"{0}\">{1}</param>\n", param.Name, NormalizeComment(paramDescription));
        }

        returnValue = (string.IsNullOrEmpty(returnTag.Description) ? returnTag.Type.Name : returnTag.Description) ?? "*";
        comments.AppendFormat("\t\t/// <returns>{0}</returns>{1}", NormalizeComment(returnValue), hasSeeValues ? "\n" : string.Empty);

        if (hasSeeValues) {
            var parsedSeeValues = ParseSeeValues(item.Comments["see"].Description).ToList();

            parsedSeeValues.ForEach(see => {
                comments.AppendFormat("\t\t/// <see cref=\"{0}\"/>{1}", see, parsedSeeValues.Last().Equals(see) ? string.Empty : "\n");
            });
        }

        return comments.ToString();
    }

	private string NormalizeComment(string comment) {
        var splitted = Regex.Split(comment, "\n").Select(s => s.Replace("        ", " ").Replace("\n", "\n\t\t/// "));

        return string.Join("", splitted);
    }

	private IDictionary<string, JSDoc> DeserializeComments(string path) {
        var fileContent = File.ReadAllText($"{path}doc.js");
        var comments = JsonConvert.DeserializeObject<JSDoc[]>(fileContent);

        comments.ToList().ForEach(c => {
            var dictionary = c.LeadingComments.Tags.GroupBy(t => !t.Title.Equals("param")).ToDictionary(g => g.Key, g => g.AsEnumerable());

            c.Comments = new HashSet<Tag>(dictionary[true]).ToDictionary(t => t.Title);

            if (dictionary.ContainsKey(false)) {
                c.Params = dictionary[false].ToArray();
            }
        });

        return comments.ToDictionary(jsDoc => jsDoc.Name);
    }

    private string ToCamelCase(string value) {
        return value.Substring(0, 1).ToLower() + value.Substring(1);
    }

    private IEnumerable<string> ParseSeeValues(string see) {
        return SplitSeeValues(see).Select(s => {
            var innerSplitted = Regex.Split(s, "R.");

            return $"R.{ToPascalCase(innerSplitted[1])}";
        });
    }

    private IEnumerable<string> SplitSeeValues(string see) {
        return see.Split(new[] { ',' }).Select(s => s.Trim()).ToArray();
    }

    private string ToPascalCase(string value) {
        return value.Substring(0, 1).ToUpper() + value.Substring(1);
    }

	private void EnsureRamdaDocumentation(string path) {
        var docFilePath = $"{path}doc.js";

        if (!File.Exists(docFilePath)) {
            WriteDocumentationFile(path);
        }
    }

	private void WriteDocumentationFile(string path) {
        var startInfo = new ProcessStartInfo(fileName: "doc.cmd") {
            WorkingDirectory = path
        };

        Process.Start(startInfo).WaitForExit();
    }

	public class JSDoc
    {
        public string Name { get; set; }
        public Tag[] Params { get; set; }
        public Comments LeadingComments { get; set; }
        public Dictionary<string, Tag> Comments { get; set; }

        public JSDoc() {
            Params = new Tag[0];
        }
    }

    public class Comments
    {
        public Tag[] Tags { get; set; }
        public string Description { get; set; }
    }

    public class Tag : IEquatable<Tag>
    {
        public Type Type { get; set; }
        public string Name { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }

        public bool Equals(Tag other) {
            if (other == null) {
                return false;
            }

            return this.Title.Equals(other.Title);
        }

        public override bool Equals(object obj) {
            return Equals(obj as Tag);
        }

        public override int GetHashCode() {
            return Title.GetHashCode();
        }
    }

	public class Type
    {
        public string Name { get; set; }
    }

	public RamdaTemplate() {
		Generics = new List<string>();
		Emitted = new HashSet<string>();
		SkippedIndexedGaps = new List<int>();
		Parameters = new List<Tuple<string, string, bool>>();
		name = Path.GetFileNameWithoutExtension(TransformationContext.Current.Host.TemplateFile).Split('.')[0];
	}

	public string CommentName { get; set; }
	
	private string Documentation { get; set; }

	public List<string> Generics { get; set; }
	
	private HashSet<string> Emitted { get; set; }

	public bool IgnoreDelegateWrapping { get; set; }

	public List<int> SkippedIndexedGaps { get; set; }
	
	public bool AllGapsFunctionAlreadyExists { get; set; }
	
	public List<Tuple<string, string, bool>> Parameters { get; set; }

	private string FormatTuple(Tuple<string, string, bool> tuple) {
		return string.Format("{0} {1}", tuple.Item1, tuple.Item2);
	}

	private string ResolveGenerics(List<string> generics) {
		return generics.Count > 0 ? "<" + string.Join(", ", generics) + ">" : "";
	}

	private bool FillPlaceholders(List<Tuple<string, string, bool>> tuples, int index) {
        bool hasDynamic = false;

        for (int i = tuples.Count - 1; i >= 0; i--) {
            var tuple = tuples[i];

            if (tuple.Item3 && i == index) {
                hasDynamic = true;
            }
			else if (hasDynamic) {
                tuples[i] = FillPlaceholder(tuple);
				
			}
			else {
                tuples[i] = FillNullablePlaceholder(tuple);
			}
        }

		return hasDynamic;
    }

	private bool TryGetDynamicParameters(List<Tuple<string, string, bool>> tuples, int? index = null) {
        bool hasDynamic = false;

        for (int i = 0; i < tuples.Count; i++) {
            var tuple = tuples[i];

            if (tuple.Item3) {
				if ((index != null && i == index) || index == null) {
					hasDynamic = true;

					tuples[i] = Tuple.Create("dynamic", tuple.Item2, true);
				}

				if (hasDynamic && index != null) {
					break;
				}
            }
        }

        return hasDynamic;
    }

	private List<int> TryGetDynamicIndexes(List<Tuple<string, string, bool>> tuples) {
        var list = new List<int>();

        for (int i = 0; i < tuples.Count; i++) {
            var tuple = tuples[i];

            if (tuple.Item3) {
                list.Add(i);
            }
        }

        return list;
    }

	private string ResolveGenerics(IEnumerable<Tuple<string, string, bool>> tuples) {
		var hash = new HashSet<string>();
        var generics = new List<string>();
		var sorted = new List<string>();
        
        var types = tuples.Select(tuple => tuple.Item1).ToList();

        types.ForEach(type => {
			var filteredGenerics = Generics.Where(g => type.IndexOf(g) > -1).ToList();

			filteredGenerics.ForEach(generic => {
				if (generic != null && hash.Add(generic)) {
					generics.Add(generic);
				}
			});
        });

		Generics.ForEach(generic => {
			if (generics.Contains(generic)) {
				sorted.Add(generic);
			}
		});

		return ResolveGenerics(sorted);
	}

	private bool TupleEquals(Tuple<string, string, bool> first, Tuple<string, string, bool> second) {
		return first.Item1.Equals(second.Item1) && first.Item2.Equals(second.Item2) && first.Item3.Equals(second.Item3);
	}

	private bool SequenceEquals(List<Tuple<string, string, bool>> first, List<Tuple<string, string, bool>> second) {
		if (first.Count != second.Count) {
			return false;
		}

		for (var i = 0; i < first.Count; i++) {
			if (!TupleEquals(first[i], second[i])) {
				return false;
			}
		}

		return true;
	}

	private string Join(IEnumerable<Tuple<string, string, bool>> joined) {
		return string.Join(", ", joined.Select(FormatTuple)); 
	}

	private Tuple<string, string, bool> FillPlaceholder(Tuple<string, string, bool> tuple) {
		
		return Tuple.Create("RamdaPlaceholder", tuple.Item2, false);
	}

	private Tuple<string, string, bool> FillNullablePlaceholder(Tuple<string, string, bool> tuple) {
		
		return Tuple.Create("RamdaPlaceholder", string.Format("{0} = null", tuple.Item2), false);
	}

	private string ToArguments(List<Tuple<string, string, bool>> tuples) {
		var list = new List<string>();

		for (int i = 0; i < tuples.Count; i++) {
			var tuple = tuples[i];
			var name = tuple.Item2.Replace(" = null", "");

			if (tuple.Item3 && !IgnoreDelegateWrapping) {
				list.Add(string.Format("Delegate({0})", name));
			}
			else {
				list.Add(name);
			}
		}

		return string.Join(", ", list);
	}

	private void Emit(List<Tuple<string, string, bool>> list, string name) {
		for (var i = 0; i < list.Count; i++)	 {
			if (SkippedIndexedGaps.Contains(i)) {
				continue;
			}

			string joined;
			var shifted = list.ToList();
			var shiftedItem = list[i];
			
			shifted.RemoveAt(i);
			shifted.Insert(i, i == Parameters.Count - 1 ? FillNullablePlaceholder(shiftedItem) : FillPlaceholder(shiftedItem)); 
			joined = Join(shifted);

			if (!AllGapsFunctionAlreadyExists || Parameters.Count > 1) {
				Emit(name, ResolveGenerics(shifted), joined, ToArguments(shifted));
			}
        }

		for (var i = 1; i < list.Count - 1; i++)	 {
			var taken = list.Take(i);
			var skipped = list.Skip(i);
			var joined = taken.Concat(skipped.Select(FillNullablePlaceholder)).ToList();
			var rightFilled = string.Join(", ", joined.Select(FormatTuple));		
			
			Emit(name, ResolveGenerics(joined), rightFilled, ToArguments(joined));
		}
	}

	private void Emit(string name, string generics, string parameters, string arguments, bool addNewLine = true) {
		if (!Emitted.Contains(parameters)) {
			if (addNewLine) {
				WriteLine("");
			}#>
		<#= Documentation #>
		public static dynamic <#= name #><#= generics #>(<#= parameters #>) {
			return Currying.<#= name #>(<#= arguments #>);
		}
<#+			Emitted.Add(parameters);
		}
	}

	private string GenerateDynamicArguments(List<Tuple<string, string, bool>> dynamics) {
		var format = IgnoreDelegateWrapping ? "{0}" : "Delegate({0})";

		return string.Join(", ", dynamics.Select(d => d.Item3 ? string.Format(format, d.Item2) : d.Item2));
	}

	public override string TransformText() {
		base.TransformText();
#>
using System;
using System.Dynamic;
using System.Collections;
using System.Threading.Tasks;
using static Ramda.NET.Currying;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Ramda.NET
{
	public static partial class R
	{	
<#+		
		var path = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(this.Context.Host.TemplateFile), @"..\", @"doc\"));
		var dynamics = Parameters.ToList();
		var generics = Generics.Count > 0 ? "<" + string.Join(", ", Generics) + ">" : "";
		var arguments = string.Join(", ", Parameters.Select(t => t.Item2));

		Documentation = EmitDocumentation(path);
		Emit(name, generics, Join(Parameters), ToArguments(Parameters), false);
		Emit(Parameters.ToList(), name);
		
		if (TryGetDynamicParameters(dynamics)) {
			var indexes = TryGetDynamicIndexes(dynamics);
			
			Emit(dynamics, name);

			indexes.ForEach(i => {
				dynamics = Parameters.ToList();

				if (TryGetDynamicParameters(dynamics, i)) {
					var joined = string.Join(", ", dynamics.Select(FormatTuple));

					Emit(name, ResolveGenerics(dynamics), joined, GenerateDynamicArguments(dynamics));
				}
			});
		}
		
		if (!AllGapsFunctionAlreadyExists && Parameters.Count > 1) {
			Emit(name, string.Empty, string.Join(", ", Parameters.Select(FillNullablePlaceholder).Select(FormatTuple)), arguments);
		}#>
	}
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>