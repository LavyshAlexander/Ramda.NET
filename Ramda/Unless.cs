// <autogenerated>
//   This file was generated by T4 code generator Unless.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Dynamic;
using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Ramda.NET
{
	public static partial class R
	{	
		public static dynamic Unless<TArg, TReturn>(Func<TArg, bool> pred, Func<TArg, TReturn> whenFalseFn, TArg x) {
			return Currying.Unless(new DelegateDecorator(pred), new DelegateDecorator(whenFalseFn), x);
		}

		public static dynamic Unless<TArg, TReturn>(RamdaPlaceholder pred, Func<TArg, TReturn> whenFalseFn, TArg x) {
			return Currying.Unless(pred, new DelegateDecorator(whenFalseFn), x);
		}

		public static dynamic Unless<TArg>(Func<TArg, bool> pred, RamdaPlaceholder whenFalseFn, TArg x) {
			return Currying.Unless(new DelegateDecorator(pred), whenFalseFn, x);
		}

		public static dynamic Unless<TArg, TReturn>(Func<TArg, bool> pred, Func<TArg, TReturn> whenFalseFn, RamdaPlaceholder x = null) {
			return Currying.Unless(new DelegateDecorator(pred), new DelegateDecorator(whenFalseFn), x);
		}

		public static dynamic Unless<TArg>(Func<TArg, bool> pred, RamdaPlaceholder whenFalseFn = null, RamdaPlaceholder x = null) {
			return Currying.Unless(new DelegateDecorator(pred), whenFalseFn, x);
		}

		public static dynamic Unless<TArg>(RamdaPlaceholder pred, dynamic whenFalseFn, TArg x) {
			return Currying.Unless(pred, whenFalseFn, x);
		}

		public static dynamic Unless<TArg>(dynamic pred, RamdaPlaceholder whenFalseFn, TArg x) {
			return Currying.Unless(pred, whenFalseFn, x);
		}

		public static dynamic Unless(dynamic pred, dynamic whenFalseFn, RamdaPlaceholder x = null) {
			return Currying.Unless(pred, whenFalseFn, x);
		}

		public static dynamic Unless(dynamic pred, RamdaPlaceholder whenFalseFn = null, RamdaPlaceholder x = null) {
			return Currying.Unless(pred, whenFalseFn, x);
		}

		public static dynamic Unless<TArg, TReturn>(dynamic pred, Func<TArg, TReturn> whenFalseFn, TArg x) {
			return Currying.Unless(pred, whenFalseFn, x);
		}

		public static dynamic Unless<TArg>(Func<TArg, bool> pred, dynamic whenFalseFn, TArg x) {
			return Currying.Unless(pred, whenFalseFn, x);
		}

		public static dynamic Unless(RamdaPlaceholder pred = null, RamdaPlaceholder whenFalseFn = null, RamdaPlaceholder x = null) {
			return Currying.Unless(pred, whenFalseFn, x);
		}
	}
}