// <autogenerated>
//   This file was generated by T4 code generator Clamp.double.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Dynamic;
using System.Collections;
using System.Threading.Tasks;
using static Ramda.NET.Currying;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Ramda.NET
{
	public static partial class R
	{	
		/// <summary>
		/// Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
		/// <para />
		/// sig: Ord a => a -> a -> a -> a
		/// </summary>
		/// <param name="minimum">The lower limit of the clamp (inclusive)</param>
		/// <param name="maximum">The upper limit of the clamp (inclusive)</param>
		/// <param name="value">Value to be clamped</param>
		/// <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
		public static dynamic Clamp(double minimum, double maximum, double value) {
			return Currying.Clamp(minimum, maximum, value);
		}

		/// <summary>
		/// Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
		/// <para />
		/// sig: Ord a => a -> a -> a -> a
		/// </summary>
		/// <param name="minimum">The lower limit of the clamp (inclusive)</param>
		/// <param name="maximum">The upper limit of the clamp (inclusive)</param>
		/// <param name="value">Value to be clamped</param>
		/// <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
		public static dynamic Clamp(RamdaPlaceholder minimum, double maximum, double value) {
			return Currying.Clamp(minimum, maximum, value);
		}

		/// <summary>
		/// Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
		/// <para />
		/// sig: Ord a => a -> a -> a -> a
		/// </summary>
		/// <param name="minimum">The lower limit of the clamp (inclusive)</param>
		/// <param name="maximum">The upper limit of the clamp (inclusive)</param>
		/// <param name="value">Value to be clamped</param>
		/// <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
		public static dynamic Clamp(double minimum, RamdaPlaceholder maximum, double value) {
			return Currying.Clamp(minimum, maximum, value);
		}

		/// <summary>
		/// Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
		/// <para />
		/// sig: Ord a => a -> a -> a -> a
		/// </summary>
		/// <param name="minimum">The lower limit of the clamp (inclusive)</param>
		/// <param name="maximum">The upper limit of the clamp (inclusive)</param>
		/// <param name="value">Value to be clamped</param>
		/// <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
		public static dynamic Clamp(double minimum, double maximum, RamdaPlaceholder value = null) {
			return Currying.Clamp(minimum, maximum, value);
		}

		/// <summary>
		/// Restricts a number to be within a range.Also works for other ordered types such as Strings and Dates.
		/// <para />
		/// sig: Ord a => a -> a -> a -> a
		/// </summary>
		/// <param name="minimum">The lower limit of the clamp (inclusive)</param>
		/// <param name="maximum">The upper limit of the clamp (inclusive)</param>
		/// <param name="value">Value to be clamped</param>
		/// <returns>Returns `minimum` when `val <![CDATA[<]]> minimum`, `maximum` when `val <![CDATA[>]]> maximum`, returns `val` otherwise</returns>
		public static dynamic Clamp(double minimum, RamdaPlaceholder maximum = null, RamdaPlaceholder value = null) {
			return Currying.Clamp(minimum, maximum, value);
		}
	}
}