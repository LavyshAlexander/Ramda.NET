// <autogenerated>
//   This file was generated by T4 code generator Converge.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Dynamic;
using System.Collections;
using System.Threading.Tasks;
using static Ramda.NET.Currying;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Ramda.NET
{
	public static partial class R
	{	
		/// <summary>
		/// Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
		/// <para />
		/// sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
		/// </summary>
		/// <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
		/// <param name="functions">A list of functions.</param>
		/// <returns>A new function.</returns>
		/// <see cref="R.UseWith"/>
		public static dynamic Converge(Delegate after, IList<Delegate> functions) {
			return Currying.Converge(Delegate(after), functions);
		}

		/// <summary>
		/// Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
		/// <para />
		/// sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
		/// </summary>
		/// <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
		/// <param name="functions">A list of functions.</param>
		/// <returns>A new function.</returns>
		/// <see cref="R.UseWith"/>
		public static dynamic Converge(RamdaPlaceholder after, IList<Delegate> functions) {
			return Currying.Converge(after, functions);
		}

		/// <summary>
		/// Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
		/// <para />
		/// sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
		/// </summary>
		/// <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
		/// <param name="functions">A list of functions.</param>
		/// <returns>A new function.</returns>
		/// <see cref="R.UseWith"/>
		public static dynamic Converge(Delegate after, RamdaPlaceholder functions = null) {
			return Currying.Converge(Delegate(after), functions);
		}

		/// <summary>
		/// Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
		/// <para />
		/// sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
		/// </summary>
		/// <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
		/// <param name="functions">A list of functions.</param>
		/// <returns>A new function.</returns>
		/// <see cref="R.UseWith"/>
		public static dynamic Converge(dynamic after, RamdaPlaceholder functions = null) {
			return Currying.Converge(Delegate(after), functions);
		}

		/// <summary>
		/// Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
		/// <para />
		/// sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
		/// </summary>
		/// <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
		/// <param name="functions">A list of functions.</param>
		/// <returns>A new function.</returns>
		/// <see cref="R.UseWith"/>
		public static dynamic Converge(dynamic after, IList<Delegate> functions) {
			return Currying.Converge(Delegate(after), functions);
		}

		/// <summary>
		/// Accepts a converging function and a list of branching functions and returnsa new function. When invoked, this new function is applied to somearguments, each branching function is applied to those same arguments. Theresults of each branching function are passed as arguments to the convergingfunction to produce the return value.
		/// <para />
		/// sig: (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)
		/// </summary>
		/// <param name="after">A function. `after` will be invoked with the return values of       `fn1` and `fn2` as its arguments.</param>
		/// <param name="functions">A list of functions.</param>
		/// <returns>A new function.</returns>
		/// <see cref="R.UseWith"/>
		public static dynamic Converge(RamdaPlaceholder after = null, RamdaPlaceholder functions = null) {
			return Currying.Converge(after, functions);
		}
	}
}