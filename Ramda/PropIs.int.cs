// <autogenerated>
//   This file was generated by T4 code generator PropIs.int.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Dynamic;
using System.Collections;
using System.Threading.Tasks;
using static Ramda.NET.Currying;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace Ramda.NET
{
	public static partial class R
	{	
		/// <summary>
		/// Returns `true` if the specified object property is of the given type;`false` otherwise.
		/// <para />
		/// sig: Type -> String -> Object -> Boolean
		/// </summary>
		/// <param name="type">first</param>
		/// <param name="name">second</param>
		/// <param name="obj">third</param>
		/// <returns>Boolean</returns>
		/// <see cref="R.Is"/>
		/// <see cref="R.PropSatisfies"/>
		public static dynamic PropIs<TTarget>(Type type, int name, TTarget obj) where TTarget : IList {
			return Currying.PropIs(type, name, obj);
		}

		/// <summary>
		/// Returns `true` if the specified object property is of the given type;`false` otherwise.
		/// <para />
		/// sig: Type -> String -> Object -> Boolean
		/// </summary>
		/// <param name="type">first</param>
		/// <param name="name">second</param>
		/// <param name="obj">third</param>
		/// <returns>Boolean</returns>
		/// <see cref="R.Is"/>
		/// <see cref="R.PropSatisfies"/>
		public static dynamic PropIs<TTarget>(RamdaPlaceholder type, int name, TTarget obj) where TTarget : IList {
			return Currying.PropIs(type, name, obj);
		}

		/// <summary>
		/// Returns `true` if the specified object property is of the given type;`false` otherwise.
		/// <para />
		/// sig: Type -> String -> Object -> Boolean
		/// </summary>
		/// <param name="type">first</param>
		/// <param name="name">second</param>
		/// <param name="obj">third</param>
		/// <returns>Boolean</returns>
		/// <see cref="R.Is"/>
		/// <see cref="R.PropSatisfies"/>
		public static dynamic PropIs(Type type, int name, RamdaPlaceholder obj = null) {
			return Currying.PropIs(type, name, obj);
		}
	}
}